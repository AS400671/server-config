# default filters

filter import_default_v4
{
    set_bgp_community_import();
    if is_martian_v4()      then reject;
    if is_self_net_v4()     then reject;
    if is_small_prefix_v4() then reject;
    if is_dprk_route()      then reject;
    if is_invalid_rpki()    then reject;

    if is_long_aspath()     then reject;
    if is_martian_asn()     then reject;
    if is_my_asn()          then reject;

    respect_graceful_shutdown();
    accept;
}

filter import_default_v6
{
    set_bgp_community_import();
    if is_martian_v6()      then reject;
    if is_self_net_v6()     then reject;
    if is_small_prefix_v6() then reject;
    if is_dprk_route()      then reject;
    if is_invalid_rpki()    then reject;

    if is_long_aspath()     then reject;
    if is_martian_asn()     then reject;
    if is_my_asn()          then reject;

    respect_graceful_shutdown();
    accept;
}

filter export_default_v4
{
    set_bgp_community_export();
    if is_martian_v4()      then reject;
    if is_small_prefix_v4() then reject;
    if is_long_aspath()     then reject;
    if is_dprk_route()      then reject;

    if source ~ [ RTS_DEVICE ] then accept;
    if is_self_net_v4() then accept;
    reject;
}

filter export_default_v6
{
    set_bgp_community_export();
    if is_martian_v6()      then reject;
    if is_small_prefix_v6() then reject;
    if is_long_aspath()     then reject;
    if is_dprk_route()      then reject;

    if source ~ [ RTS_DEVICE ] then accept;
    if is_self_net_v6() then accept;
    reject;
}

filter export_client_v4 {
    set_bgp_community_export();
    if is_martian_v6()      then reject;
    if is_small_prefix_v6() then reject;
    if is_long_aspath()     then reject;
    if is_dprk_route()      then reject;

    if is_short_aspath()  then reject;
    if in_transit_paths() then reject;
    # Block blackholes and blacklisted networks
    if (my_asn, 666, 666) ~ bgp_large_community then reject;

    if is_self_net_v6() then accept;
    if source ~ [ RTS_DEVICE, RTS_BGP ] then accept;
    reject;
}

filter export_client_v6 {
    set_bgp_community_export();
    if is_martian_v6()      then reject;
    if is_small_prefix_v6() then reject;
    if is_long_aspath()     then reject;
    if is_dprk_route()      then reject;

    if is_short_aspath()  then reject;
    if in_transit_paths() then reject;
    # Block blackholes and blacklisted networks
    if (my_asn, 666, 666) ~ bgp_large_community then reject;

    if is_self_net_v6() then accept;
    if source ~ [ RTS_DEVICE, RTS_BGP ] then accept;
    reject;
}
